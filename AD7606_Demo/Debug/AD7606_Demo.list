
AD7606_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003898  08003898  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003898  08003898  00013898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038a0  080038a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001134  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001140  20001140  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2e5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002004  00000000  00000000  0002c321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002e328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  0002eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218d9  00000000  00000000  0002f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d294  00000000  00000000  00051239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc20e  00000000  00000000  0005e4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a6db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003040  00000000  00000000  0012a72c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003870 	.word	0x08003870

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003870 	.word	0x08003870

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b974 	b.w	8000ae4 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	4604      	mov	r4, r0
 800081c:	468e      	mov	lr, r1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d14d      	bne.n	80008be <__udivmoddi4+0xaa>
 8000822:	428a      	cmp	r2, r1
 8000824:	4694      	mov	ip, r2
 8000826:	d969      	bls.n	80008fc <__udivmoddi4+0xe8>
 8000828:	fab2 f282 	clz	r2, r2
 800082c:	b152      	cbz	r2, 8000844 <__udivmoddi4+0x30>
 800082e:	fa01 f302 	lsl.w	r3, r1, r2
 8000832:	f1c2 0120 	rsb	r1, r2, #32
 8000836:	fa20 f101 	lsr.w	r1, r0, r1
 800083a:	fa0c fc02 	lsl.w	ip, ip, r2
 800083e:	ea41 0e03 	orr.w	lr, r1, r3
 8000842:	4094      	lsls	r4, r2
 8000844:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000848:	0c21      	lsrs	r1, r4, #16
 800084a:	fbbe f6f8 	udiv	r6, lr, r8
 800084e:	fa1f f78c 	uxth.w	r7, ip
 8000852:	fb08 e316 	mls	r3, r8, r6, lr
 8000856:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800085a:	fb06 f107 	mul.w	r1, r6, r7
 800085e:	4299      	cmp	r1, r3
 8000860:	d90a      	bls.n	8000878 <__udivmoddi4+0x64>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f106 30ff 	add.w	r0, r6, #4294967295
 800086a:	f080 811f 	bcs.w	8000aac <__udivmoddi4+0x298>
 800086e:	4299      	cmp	r1, r3
 8000870:	f240 811c 	bls.w	8000aac <__udivmoddi4+0x298>
 8000874:	3e02      	subs	r6, #2
 8000876:	4463      	add	r3, ip
 8000878:	1a5b      	subs	r3, r3, r1
 800087a:	b2a4      	uxth	r4, r4
 800087c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000880:	fb08 3310 	mls	r3, r8, r0, r3
 8000884:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000888:	fb00 f707 	mul.w	r7, r0, r7
 800088c:	42a7      	cmp	r7, r4
 800088e:	d90a      	bls.n	80008a6 <__udivmoddi4+0x92>
 8000890:	eb1c 0404 	adds.w	r4, ip, r4
 8000894:	f100 33ff 	add.w	r3, r0, #4294967295
 8000898:	f080 810a 	bcs.w	8000ab0 <__udivmoddi4+0x29c>
 800089c:	42a7      	cmp	r7, r4
 800089e:	f240 8107 	bls.w	8000ab0 <__udivmoddi4+0x29c>
 80008a2:	4464      	add	r4, ip
 80008a4:	3802      	subs	r0, #2
 80008a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008aa:	1be4      	subs	r4, r4, r7
 80008ac:	2600      	movs	r6, #0
 80008ae:	b11d      	cbz	r5, 80008b8 <__udivmoddi4+0xa4>
 80008b0:	40d4      	lsrs	r4, r2
 80008b2:	2300      	movs	r3, #0
 80008b4:	e9c5 4300 	strd	r4, r3, [r5]
 80008b8:	4631      	mov	r1, r6
 80008ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008be:	428b      	cmp	r3, r1
 80008c0:	d909      	bls.n	80008d6 <__udivmoddi4+0xc2>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	f000 80ef 	beq.w	8000aa6 <__udivmoddi4+0x292>
 80008c8:	2600      	movs	r6, #0
 80008ca:	e9c5 0100 	strd	r0, r1, [r5]
 80008ce:	4630      	mov	r0, r6
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	fab3 f683 	clz	r6, r3
 80008da:	2e00      	cmp	r6, #0
 80008dc:	d14a      	bne.n	8000974 <__udivmoddi4+0x160>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0xd4>
 80008e2:	4282      	cmp	r2, r0
 80008e4:	f200 80f9 	bhi.w	8000ada <__udivmoddi4+0x2c6>
 80008e8:	1a84      	subs	r4, r0, r2
 80008ea:	eb61 0303 	sbc.w	r3, r1, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	469e      	mov	lr, r3
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d0e0      	beq.n	80008b8 <__udivmoddi4+0xa4>
 80008f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008fa:	e7dd      	b.n	80008b8 <__udivmoddi4+0xa4>
 80008fc:	b902      	cbnz	r2, 8000900 <__udivmoddi4+0xec>
 80008fe:	deff      	udf	#255	; 0xff
 8000900:	fab2 f282 	clz	r2, r2
 8000904:	2a00      	cmp	r2, #0
 8000906:	f040 8092 	bne.w	8000a2e <__udivmoddi4+0x21a>
 800090a:	eba1 010c 	sub.w	r1, r1, ip
 800090e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000912:	fa1f fe8c 	uxth.w	lr, ip
 8000916:	2601      	movs	r6, #1
 8000918:	0c20      	lsrs	r0, r4, #16
 800091a:	fbb1 f3f7 	udiv	r3, r1, r7
 800091e:	fb07 1113 	mls	r1, r7, r3, r1
 8000922:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000926:	fb0e f003 	mul.w	r0, lr, r3
 800092a:	4288      	cmp	r0, r1
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x12c>
 800092e:	eb1c 0101 	adds.w	r1, ip, r1
 8000932:	f103 38ff 	add.w	r8, r3, #4294967295
 8000936:	d202      	bcs.n	800093e <__udivmoddi4+0x12a>
 8000938:	4288      	cmp	r0, r1
 800093a:	f200 80cb 	bhi.w	8000ad4 <__udivmoddi4+0x2c0>
 800093e:	4643      	mov	r3, r8
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f7 	udiv	r0, r1, r7
 8000948:	fb07 1110 	mls	r1, r7, r0, r1
 800094c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000950:	fb0e fe00 	mul.w	lr, lr, r0
 8000954:	45a6      	cmp	lr, r4
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x156>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000960:	d202      	bcs.n	8000968 <__udivmoddi4+0x154>
 8000962:	45a6      	cmp	lr, r4
 8000964:	f200 80bb 	bhi.w	8000ade <__udivmoddi4+0x2ca>
 8000968:	4608      	mov	r0, r1
 800096a:	eba4 040e 	sub.w	r4, r4, lr
 800096e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000972:	e79c      	b.n	80008ae <__udivmoddi4+0x9a>
 8000974:	f1c6 0720 	rsb	r7, r6, #32
 8000978:	40b3      	lsls	r3, r6
 800097a:	fa22 fc07 	lsr.w	ip, r2, r7
 800097e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000982:	fa20 f407 	lsr.w	r4, r0, r7
 8000986:	fa01 f306 	lsl.w	r3, r1, r6
 800098a:	431c      	orrs	r4, r3
 800098c:	40f9      	lsrs	r1, r7
 800098e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000992:	fa00 f306 	lsl.w	r3, r0, r6
 8000996:	fbb1 f8f9 	udiv	r8, r1, r9
 800099a:	0c20      	lsrs	r0, r4, #16
 800099c:	fa1f fe8c 	uxth.w	lr, ip
 80009a0:	fb09 1118 	mls	r1, r9, r8, r1
 80009a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009a8:	fb08 f00e 	mul.w	r0, r8, lr
 80009ac:	4288      	cmp	r0, r1
 80009ae:	fa02 f206 	lsl.w	r2, r2, r6
 80009b2:	d90b      	bls.n	80009cc <__udivmoddi4+0x1b8>
 80009b4:	eb1c 0101 	adds.w	r1, ip, r1
 80009b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009bc:	f080 8088 	bcs.w	8000ad0 <__udivmoddi4+0x2bc>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f240 8085 	bls.w	8000ad0 <__udivmoddi4+0x2bc>
 80009c6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	1a09      	subs	r1, r1, r0
 80009ce:	b2a4      	uxth	r4, r4
 80009d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009d4:	fb09 1110 	mls	r1, r9, r0, r1
 80009d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e0:	458e      	cmp	lr, r1
 80009e2:	d908      	bls.n	80009f6 <__udivmoddi4+0x1e2>
 80009e4:	eb1c 0101 	adds.w	r1, ip, r1
 80009e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009ec:	d26c      	bcs.n	8000ac8 <__udivmoddi4+0x2b4>
 80009ee:	458e      	cmp	lr, r1
 80009f0:	d96a      	bls.n	8000ac8 <__udivmoddi4+0x2b4>
 80009f2:	3802      	subs	r0, #2
 80009f4:	4461      	add	r1, ip
 80009f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009fa:	fba0 9402 	umull	r9, r4, r0, r2
 80009fe:	eba1 010e 	sub.w	r1, r1, lr
 8000a02:	42a1      	cmp	r1, r4
 8000a04:	46c8      	mov	r8, r9
 8000a06:	46a6      	mov	lr, r4
 8000a08:	d356      	bcc.n	8000ab8 <__udivmoddi4+0x2a4>
 8000a0a:	d053      	beq.n	8000ab4 <__udivmoddi4+0x2a0>
 8000a0c:	b15d      	cbz	r5, 8000a26 <__udivmoddi4+0x212>
 8000a0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a12:	eb61 010e 	sbc.w	r1, r1, lr
 8000a16:	fa01 f707 	lsl.w	r7, r1, r7
 8000a1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a1e:	40f1      	lsrs	r1, r6
 8000a20:	431f      	orrs	r7, r3
 8000a22:	e9c5 7100 	strd	r7, r1, [r5]
 8000a26:	2600      	movs	r6, #0
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	f1c2 0320 	rsb	r3, r2, #32
 8000a32:	40d8      	lsrs	r0, r3
 8000a34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a38:	fa21 f303 	lsr.w	r3, r1, r3
 8000a3c:	4091      	lsls	r1, r2
 8000a3e:	4301      	orrs	r1, r0
 8000a40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a44:	fa1f fe8c 	uxth.w	lr, ip
 8000a48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a50:	0c0b      	lsrs	r3, r1, #16
 8000a52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a56:	fb00 f60e 	mul.w	r6, r0, lr
 8000a5a:	429e      	cmp	r6, r3
 8000a5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x260>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a6a:	d22f      	bcs.n	8000acc <__udivmoddi4+0x2b8>
 8000a6c:	429e      	cmp	r6, r3
 8000a6e:	d92d      	bls.n	8000acc <__udivmoddi4+0x2b8>
 8000a70:	3802      	subs	r0, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1b9b      	subs	r3, r3, r6
 8000a76:	b289      	uxth	r1, r1
 8000a78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a84:	fb06 f30e 	mul.w	r3, r6, lr
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x28a>
 8000a8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a94:	d216      	bcs.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d914      	bls.n	8000ac4 <__udivmoddi4+0x2b0>
 8000a9a:	3e02      	subs	r6, #2
 8000a9c:	4461      	add	r1, ip
 8000a9e:	1ac9      	subs	r1, r1, r3
 8000aa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000aa4:	e738      	b.n	8000918 <__udivmoddi4+0x104>
 8000aa6:	462e      	mov	r6, r5
 8000aa8:	4628      	mov	r0, r5
 8000aaa:	e705      	b.n	80008b8 <__udivmoddi4+0xa4>
 8000aac:	4606      	mov	r6, r0
 8000aae:	e6e3      	b.n	8000878 <__udivmoddi4+0x64>
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	e6f8      	b.n	80008a6 <__udivmoddi4+0x92>
 8000ab4:	454b      	cmp	r3, r9
 8000ab6:	d2a9      	bcs.n	8000a0c <__udivmoddi4+0x1f8>
 8000ab8:	ebb9 0802 	subs.w	r8, r9, r2
 8000abc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ac0:	3801      	subs	r0, #1
 8000ac2:	e7a3      	b.n	8000a0c <__udivmoddi4+0x1f8>
 8000ac4:	4646      	mov	r6, r8
 8000ac6:	e7ea      	b.n	8000a9e <__udivmoddi4+0x28a>
 8000ac8:	4620      	mov	r0, r4
 8000aca:	e794      	b.n	80009f6 <__udivmoddi4+0x1e2>
 8000acc:	4640      	mov	r0, r8
 8000ace:	e7d1      	b.n	8000a74 <__udivmoddi4+0x260>
 8000ad0:	46d0      	mov	r8, sl
 8000ad2:	e77b      	b.n	80009cc <__udivmoddi4+0x1b8>
 8000ad4:	3b02      	subs	r3, #2
 8000ad6:	4461      	add	r1, ip
 8000ad8:	e732      	b.n	8000940 <__udivmoddi4+0x12c>
 8000ada:	4630      	mov	r0, r6
 8000adc:	e709      	b.n	80008f2 <__udivmoddi4+0xde>
 8000ade:	4464      	add	r4, ip
 8000ae0:	3802      	subs	r0, #2
 8000ae2:	e742      	b.n	800096a <__udivmoddi4+0x156>

08000ae4 <__aeabi_idiv0>:
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8000b00:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b02:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000b06:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <MX_FSMC_Init+0xb8>)
 8000b0c:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b10:	2206      	movs	r2, #6
 8000b12:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b22:	2210      	movs	r2, #16
 8000b24:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_DISABLE;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram4.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 3;
 8000b62:	2303      	movs	r3, #3
 8000b64:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000b66:	230f      	movs	r3, #15
 8000b68:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000b72:	2310      	movs	r3, #16
 8000b74:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000b76:	2311      	movs	r3, #17
 8000b78:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram4, &Timing, NULL) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_FSMC_Init+0xb4>)
 8000b86:	f001 fb8f 	bl	80022a8 <HAL_SRAM_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_FSMC_Init+0xac>
  {
    Error_Handler( );
 8000b90:	f000 f9f4 	bl	8000f7c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000028 	.word	0x20000028
 8000ba0:	a0000104 	.word	0xa0000104

08000ba4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000bb8:	4b2c      	ldr	r3, [pc, #176]	; (8000c6c <HAL_FSMC_MspInit+0xc8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d150      	bne.n	8000c62 <HAL_FSMC_MspInit+0xbe>
    return;
  }
  FSMC_Initialized = 1;
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_FSMC_MspInit+0xc8>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <HAL_FSMC_MspInit+0xcc>)
 8000bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bce:	4a28      	ldr	r2, [pc, #160]	; (8000c70 <HAL_FSMC_MspInit+0xcc>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6393      	str	r3, [r2, #56]	; 0x38
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_FSMC_MspInit+0xcc>)
 8000bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	481e      	ldr	r0, [pc, #120]	; (8000c74 <HAL_FSMC_MspInit+0xd0>)
 8000bfc:	f000 fd22 	bl	8001644 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000c00:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000c04:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4817      	ldr	r0, [pc, #92]	; (8000c78 <HAL_FSMC_MspInit+0xd4>)
 8000c1c:	f000 fd12 	bl	8001644 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000c20:	f24c 7313 	movw	r3, #50963	; 0xc713
 8000c24:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c32:	230c      	movs	r3, #12
 8000c34:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4810      	ldr	r0, [pc, #64]	; (8000c7c <HAL_FSMC_MspInit+0xd8>)
 8000c3c:	f000 fd02 	bl	8001644 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000c52:	230c      	movs	r3, #12
 8000c54:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_FSMC_MspInit+0xdc>)
 8000c5c:	f000 fcf2 	bl	8001644 <HAL_GPIO_Init>
 8000c60:	e000      	b.n	8000c64 <HAL_FSMC_MspInit+0xc0>
    return;
 8000c62:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000078 	.word	0x20000078
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40021400 	.word	0x40021400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40021800 	.word	0x40021800

08000c84 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000c8c:	f7ff ff8a 	bl	8000ba4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a4e      	ldr	r2, [pc, #312]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b4c      	ldr	r3, [pc, #304]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	61bb      	str	r3, [r7, #24]
 8000cc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	4b48      	ldr	r3, [pc, #288]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a47      	ldr	r2, [pc, #284]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b45      	ldr	r3, [pc, #276]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0320 	and.w	r3, r3, #32
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b41      	ldr	r3, [pc, #260]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a40      	ldr	r2, [pc, #256]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b3a      	ldr	r3, [pc, #232]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a39      	ldr	r2, [pc, #228]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a32      	ldr	r2, [pc, #200]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a2b      	ldr	r2, [pc, #172]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b29      	ldr	r3, [pc, #164]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a24      	ldr	r2, [pc, #144]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_GPIO_Init+0x158>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AD7606Rst_Pin|AD7606Cs_Pin|AD7606Os0_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2186      	movs	r1, #134	; 0x86
 8000d76:	481f      	ldr	r0, [pc, #124]	; (8000df4 <MX_GPIO_Init+0x15c>)
 8000d78:	f000 fe00 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD7606Os1_Pin|AD7606Os2_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2130      	movs	r1, #48	; 0x30
 8000d80:	481d      	ldr	r0, [pc, #116]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000d82:	f000 fdfb 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = AD7606Rst_Pin|AD7606Cs_Pin|AD7606Os0_Pin;
 8000d86:	2386      	movs	r3, #134	; 0x86
 8000d88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4815      	ldr	r0, [pc, #84]	; (8000df4 <MX_GPIO_Init+0x15c>)
 8000d9e:	f000 fc51 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD7606Busy_Pin;
 8000da2:	2320      	movs	r3, #32
 8000da4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AD7606Busy_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	480f      	ldr	r0, [pc, #60]	; (8000df4 <MX_GPIO_Init+0x15c>)
 8000db8:	f000 fc44 	bl	8001644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = AD7606Os1_Pin|AD7606Os2_Pin;
 8000dbc:	2330      	movs	r3, #48	; 0x30
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4809      	ldr	r0, [pc, #36]	; (8000df8 <MX_GPIO_Init+0x160>)
 8000dd4:	f000 fc36 	bl	8001644 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2017      	movs	r0, #23
 8000dde:	f000 fbfa 	bl	80015d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000de2:	2017      	movs	r0, #23
 8000de4:	f000 fc13 	bl	800160e <HAL_NVIC_EnableIRQ>

}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020800 	.word	0x40020800

08000dfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e00:	f000 fa9c 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e04:	f000 f816 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e08:	f7ff ff46 	bl	8000c98 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e0c:	f000 f932 	bl	8001074 <MX_TIM3_Init>
  MX_FSMC_Init();
 8000e10:	f7ff fe6a 	bl	8000ae8 <MX_FSMC_Init>
  MX_TIM4_Init();
 8000e14:	f000 f9a4 	bl	8001160 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	AD7606_Init();
 8000e18:	f002 fba2 	bl	8003560 <AD7606_Init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <main+0x30>)
 8000e20:	f001 fba4 	bl	800256c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <main+0x34>)
 8000e26:	f001 fad7 	bl	80023d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000e2a:	e7fe      	b.n	8000e2a <main+0x2e>
 8000e2c:	20000090 	.word	0x20000090
 8000e30:	200000d8 	.word	0x200000d8

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b094      	sub	sp, #80	; 0x50
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fd0c 	bl	8003860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <SystemClock_Config+0xcc>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a21      	ldr	r2, [pc, #132]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <SystemClock_Config+0xd0>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e90:	2301      	movs	r3, #1
 8000e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ea8:	23a8      	movs	r3, #168	; 0xa8
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eac:	2302      	movs	r3, #2
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb4:	f107 0320 	add.w	r3, r7, #32
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fd91 	bl	80019e0 <HAL_RCC_OscConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ec4:	f000 f85a 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec8:	230f      	movs	r3, #15
 8000eca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ed8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ede:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2105      	movs	r1, #5
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 fff2 	bl	8001ed0 <HAL_RCC_ClockConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ef2:	f000 f843 	bl	8000f7c <Error_Handler>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3750      	adds	r7, #80	; 0x50
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000

08000f08 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
//  if(GPIO_Pin == BUSY_Pin)
  {
	  AD7606_ISR();
 8000f12:	f002 fc4f 	bl	80037b4 <AD7606_ISR>
  }
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d114      	bne.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
//		AD7606_ReadFifo(&ch1[0]);
//		ch1_vol *= 0.3051850947599719;
		ch1_vol = RawData[0]  * 0.3051850947599719;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fbc1 	bl	80006c0 <__aeabi_i2d>
 8000f3e:	a30a      	add	r3, pc, #40	; (adr r3, 8000f68 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	f7ff f940 	bl	80001c8 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fc20 	bl	8000794 <__aeabi_d2iz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f5a:	801a      	strh	r2, [r3, #0]
	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	104e209c 	.word	0x104e209c
 8000f6c:	3fd38827 	.word	0x3fd38827
 8000f70:	40000800 	.word	0x40000800
 8000f74:	2000007c 	.word	0x2000007c
 8000f78:	2000008c 	.word	0x2000008c

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x4c>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f9dc 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD7606Busy_Pin);
 8001030:	2020      	movs	r0, #32
 8001032:	f000 fcbd 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <TIM4_IRQHandler+0x10>)
 8001042:	f001 fb5b 	bl	80026fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000d8 	.word	0x200000d8

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
 80010a0:	615a      	str	r2, [r3, #20]
 80010a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010a6:	4a2d      	ldr	r2, [pc, #180]	; (800115c <MX_TIM3_Init+0xe8>)
 80010a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010ac:	2229      	movs	r2, #41	; 0x29
 80010ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 80010b6:	4b28      	ldr	r3, [pc, #160]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010b8:	2209      	movs	r2, #9
 80010ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c8:	4823      	ldr	r0, [pc, #140]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010ca:	f001 f935 	bl	8002338 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010d4:	f7ff ff52 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	4619      	mov	r1, r3
 80010e4:	481c      	ldr	r0, [pc, #112]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010e6:	f001 fcd3 	bl	8002a90 <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010f0:	f7ff ff44 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <MX_TIM3_Init+0xe4>)
 80010f6:	f001 f9df 	bl	80024b8 <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001100:	f7ff ff3c 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001104:	2320      	movs	r3, #32
 8001106:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	4619      	mov	r1, r3
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <MX_TIM3_Init+0xe4>)
 8001114:	f002 f8bc 	bl	8003290 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800111e:	f7ff ff2d 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8001126:	2305      	movs	r3, #5
 8001128:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2200      	movs	r2, #0
 8001136:	4619      	mov	r1, r3
 8001138:	4807      	ldr	r0, [pc, #28]	; (8001158 <MX_TIM3_Init+0xe4>)
 800113a:	f001 fbe7 	bl	800290c <HAL_TIM_PWM_ConfigChannel>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001144:	f7ff ff1a 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001148:	4803      	ldr	r0, [pc, #12]	; (8001158 <MX_TIM3_Init+0xe4>)
 800114a:	f000 f893 	bl	8001274 <HAL_TIM_MspPostInit>

}
 800114e:	bf00      	nop
 8001150:	3738      	adds	r7, #56	; 0x38
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000090 	.word	0x20000090
 800115c:	40000400 	.word	0x40000400

08001160 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_TIM4_Init+0x90>)
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <MX_TIM4_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM4_Init+0x90>)
 8001184:	2229      	movs	r2, #41	; 0x29
 8001186:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_TIM4_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <MX_TIM4_Init+0x90>)
 8001190:	2209      	movs	r2, #9
 8001192:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_TIM4_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <MX_TIM4_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011a0:	4813      	ldr	r0, [pc, #76]	; (80011f0 <MX_TIM4_Init+0x90>)
 80011a2:	f001 f8c9 	bl	8002338 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80011ac:	f7ff fee6 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM4_Init+0x90>)
 80011be:	f001 fc67 	bl	8002a90 <HAL_TIM_ConfigClockSource>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80011c8:	f7ff fed8 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011cc:	2320      	movs	r3, #32
 80011ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_TIM4_Init+0x90>)
 80011da:	f002 f859 	bl	8003290 <HAL_TIMEx_MasterConfigSynchronization>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80011e4:	f7ff feca 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000d8 	.word	0x200000d8
 80011f4:	40000800 	.word	0x40000800

080011f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_TIM_Base_MspInit+0x70>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d10e      	bne.n	8001228 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <HAL_TIM_Base_MspInit+0x74>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	4a16      	ldr	r2, [pc, #88]	; (800126c <HAL_TIM_Base_MspInit+0x74>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	6413      	str	r3, [r2, #64]	; 0x40
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <HAL_TIM_Base_MspInit+0x74>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001226:	e01a      	b.n	800125e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_TIM_Base_MspInit+0x78>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d115      	bne.n	800125e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <HAL_TIM_Base_MspInit+0x74>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a0c      	ldr	r2, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x74>)
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_Base_MspInit+0x74>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	201e      	movs	r0, #30
 8001254:	f000 f9bf 	bl	80015d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001258:	201e      	movs	r0, #30
 800125a:	f000 f9d8 	bl	800160e <HAL_NVIC_EnableIRQ>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40000400 	.word	0x40000400
 800126c:	40023800 	.word	0x40023800
 8001270:	40000800 	.word	0x40000800

08001274 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_TIM_MspPostInit+0x68>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11d      	bne.n	80012d2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a10      	ldr	r2, [pc, #64]	; (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <HAL_TIM_MspPostInit+0x6c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	; (80012e4 <HAL_TIM_MspPostInit+0x70>)
 80012ce:	f000 f9b9 	bl	8001644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40000400 	.word	0x40000400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000

080012e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0b      	ldr	r2, [pc, #44]	; (8001330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001304:	4c0b      	ldr	r4, [pc, #44]	; (8001334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001312:	f7ff fe9d 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001316:	f002 fa7f 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131a:	f7ff fd6f 	bl	8000dfc <main>
  bx  lr    
 800131e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800132c:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 8001330:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001334:	20001140 	.word	0x20001140

08001338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_Init+0x40>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0d      	ldr	r2, [pc, #52]	; (800137c <HAL_Init+0x40>)
 8001346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_Init+0x40>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_Init+0x40>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x40>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x40>)
 800135e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f92b 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	200f      	movs	r0, #15
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fe0a 	bl	8000f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00

08001380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f943 	bl	800162a <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f90b 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	20000120 	.word	0x20000120

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000120 	.word	0x20000120

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	; (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff29 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e8:	f7ff ff3e 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	6978      	ldr	r0, [r7, #20]
 80015f4:	f7ff ff8e 	bl	8001514 <NVIC_EncodePriority>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fe:	4611      	mov	r1, r2
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff5d 	bl	80014c0 <__NVIC_SetPriority>
}
 8001606:	bf00      	nop
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff31 	bl	8001484 <__NVIC_EnableIRQ>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ffa2 	bl	800157c <SysTick_Config>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	e16b      	b.n	8001938 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001660:	2201      	movs	r2, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	429a      	cmp	r2, r3
 800167a:	f040 815a 	bne.w	8001932 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b01      	cmp	r3, #1
 8001688:	d005      	beq.n	8001696 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001692:	2b02      	cmp	r3, #2
 8001694:	d130      	bne.n	80016f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 0201 	and.w	r2, r3, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b03      	cmp	r3, #3
 8001702:	d017      	beq.n	8001734 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0303 	and.w	r3, r3, #3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d123      	bne.n	8001788 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	08da      	lsrs	r2, r3, #3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3208      	adds	r2, #8
 8001748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	69b9      	ldr	r1, [r7, #24]
 8001784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	2203      	movs	r2, #3
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80b4 	beq.w	8001932 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b60      	ldr	r3, [pc, #384]	; (8001950 <HAL_GPIO_Init+0x30c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	4a5f      	ldr	r2, [pc, #380]	; (8001950 <HAL_GPIO_Init+0x30c>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	; 0x44
 80017da:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_GPIO_Init+0x30c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017e6:	4a5b      	ldr	r2, [pc, #364]	; (8001954 <HAL_GPIO_Init+0x310>)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	089b      	lsrs	r3, r3, #2
 80017ec:	3302      	adds	r3, #2
 80017ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	220f      	movs	r2, #15
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_GPIO_Init+0x314>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d02b      	beq.n	800186a <HAL_GPIO_Init+0x226>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_GPIO_Init+0x318>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d025      	beq.n	8001866 <HAL_GPIO_Init+0x222>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a50      	ldr	r2, [pc, #320]	; (8001960 <HAL_GPIO_Init+0x31c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d01f      	beq.n	8001862 <HAL_GPIO_Init+0x21e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4f      	ldr	r2, [pc, #316]	; (8001964 <HAL_GPIO_Init+0x320>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d019      	beq.n	800185e <HAL_GPIO_Init+0x21a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4e      	ldr	r2, [pc, #312]	; (8001968 <HAL_GPIO_Init+0x324>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d013      	beq.n	800185a <HAL_GPIO_Init+0x216>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4d      	ldr	r2, [pc, #308]	; (800196c <HAL_GPIO_Init+0x328>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d00d      	beq.n	8001856 <HAL_GPIO_Init+0x212>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4c      	ldr	r2, [pc, #304]	; (8001970 <HAL_GPIO_Init+0x32c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d007      	beq.n	8001852 <HAL_GPIO_Init+0x20e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4b      	ldr	r2, [pc, #300]	; (8001974 <HAL_GPIO_Init+0x330>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d101      	bne.n	800184e <HAL_GPIO_Init+0x20a>
 800184a:	2307      	movs	r3, #7
 800184c:	e00e      	b.n	800186c <HAL_GPIO_Init+0x228>
 800184e:	2308      	movs	r3, #8
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001852:	2306      	movs	r3, #6
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x228>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x228>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x228>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x228>
 800186a:	2300      	movs	r3, #0
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800187c:	4935      	ldr	r1, [pc, #212]	; (8001954 <HAL_GPIO_Init+0x310>)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188a:	4b3b      	ldr	r3, [pc, #236]	; (8001978 <HAL_GPIO_Init+0x334>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018ae:	4a32      	ldr	r2, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x334>)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_GPIO_Init+0x334>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_GPIO_Init+0x334>)
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_GPIO_Init+0x334>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x334>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_GPIO_Init+0x334>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800192c:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_GPIO_Init+0x334>)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3301      	adds	r3, #1
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	2b0f      	cmp	r3, #15
 800193c:	f67f ae90 	bls.w	8001660 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800
 8001954:	40013800 	.word	0x40013800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400
 8001960:	40020800 	.word	0x40020800
 8001964:	40020c00 	.word	0x40020c00
 8001968:	40021000 	.word	0x40021000
 800196c:	40021400 	.word	0x40021400
 8001970:	40021800 	.word	0x40021800
 8001974:	40021c00 	.word	0x40021c00
 8001978:	40013c00 	.word	0x40013c00

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fa9a 	bl	8000f08 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40013c00 	.word	0x40013c00

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e267      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d075      	beq.n	8001aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019fe:	4b88      	ldr	r3, [pc, #544]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d00c      	beq.n	8001a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0a:	4b85      	ldr	r3, [pc, #532]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a12:	2b08      	cmp	r3, #8
 8001a14:	d112      	bne.n	8001a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a16:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a22:	d10b      	bne.n	8001a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a24:	4b7e      	ldr	r3, [pc, #504]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d05b      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x108>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d157      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e242      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d106      	bne.n	8001a54 <HAL_RCC_OscConfig+0x74>
 8001a46:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a75      	ldr	r2, [pc, #468]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0xb0>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a5e:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6f      	ldr	r2, [pc, #444]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6c      	ldr	r2, [pc, #432]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xb0>
 8001a78:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a68      	ldr	r2, [pc, #416]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a65      	ldr	r2, [pc, #404]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fcb6 	bl	8001408 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fcb2 	bl	8001408 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e207      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b5b      	ldr	r3, [pc, #364]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xc0>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fca2 	bl	8001408 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fc9e 	bl	8001408 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1f3      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xe8>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d063      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001af6:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x152>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1c7      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4937      	ldr	r1, [pc, #220]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	e03a      	b.n	8001bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_RCC_OscConfig+0x244>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff fc57 	bl	8001408 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fc53 	bl	8001408 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1a8      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4925      	ldr	r1, [pc, #148]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	e015      	b.n	8001bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b92:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x244>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b98:	f7ff fc36 	bl	8001408 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fc32 	bl	8001408 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e187      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d036      	beq.n	8001c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d016      	beq.n	8001c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <HAL_RCC_OscConfig+0x248>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fc16 	bl	8001408 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc12 	bl	8001408 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e167      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x200>
 8001bfe:	e01b      	b.n	8001c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x248>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fbff 	bl	8001408 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	e00e      	b.n	8001c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fbfb 	bl	8001408 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d907      	bls.n	8001c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e150      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
 8001c20:	40023800 	.word	0x40023800
 8001c24:	42470000 	.word	0x42470000
 8001c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	4b88      	ldr	r3, [pc, #544]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1ea      	bne.n	8001c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 8097 	beq.w	8001d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4a:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10f      	bne.n	8001c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b7d      	ldr	r3, [pc, #500]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a7c      	ldr	r2, [pc, #496]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
 8001c66:	4b7a      	ldr	r3, [pc, #488]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c72:	2301      	movs	r3, #1
 8001c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c76:	4b77      	ldr	r3, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x474>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c82:	4b74      	ldr	r3, [pc, #464]	; (8001e54 <HAL_RCC_OscConfig+0x474>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a73      	ldr	r2, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x474>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8e:	f7ff fbbb 	bl	8001408 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7ff fbb7 	bl	8001408 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e10c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x474>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d106      	bne.n	8001cca <HAL_RCC_OscConfig+0x2ea>
 8001cbc:	4b64      	ldr	r3, [pc, #400]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a63      	ldr	r2, [pc, #396]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	e01c      	b.n	8001d04 <HAL_RCC_OscConfig+0x324>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b05      	cmp	r3, #5
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x30c>
 8001cd2:	4b5f      	ldr	r3, [pc, #380]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a5e      	ldr	r2, [pc, #376]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	4b5c      	ldr	r3, [pc, #368]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a5b      	ldr	r2, [pc, #364]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0x324>
 8001cec:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a57      	ldr	r2, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	f023 0301 	bic.w	r3, r3, #1
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf8:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a54      	ldr	r2, [pc, #336]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d015      	beq.n	8001d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fb7c 	bl	8001408 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d12:	e00a      	b.n	8001d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d14:	f7ff fb78 	bl	8001408 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0cb      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0ee      	beq.n	8001d14 <HAL_RCC_OscConfig+0x334>
 8001d36:	e014      	b.n	8001d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7ff fb66 	bl	8001408 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d3e:	e00a      	b.n	8001d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff fb62 	bl	8001408 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0b5      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1ee      	bne.n	8001d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d62:	7dfb      	ldrb	r3, [r7, #23]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	4a38      	ldr	r2, [pc, #224]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a1 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d7e:	4b34      	ldr	r3, [pc, #208]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d05c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d141      	bne.n	8001e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <HAL_RCC_OscConfig+0x478>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fb36 	bl	8001408 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7ff fb32 	bl	8001408 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e087      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	019b      	lsls	r3, r3, #6
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	041b      	lsls	r3, r3, #16
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	061b      	lsls	r3, r3, #24
 8001de2:	491b      	ldr	r1, [pc, #108]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <HAL_RCC_OscConfig+0x478>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff fb0b 	bl	8001408 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff fb07 	bl	8001408 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e05c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x416>
 8001e14:	e054      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_RCC_OscConfig+0x478>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff faf4 	bl	8001408 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff faf0 	bl	8001408 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e045      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_OscConfig+0x470>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x444>
 8001e42:	e03d      	b.n	8001ec0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e038      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40007000 	.word	0x40007000
 8001e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x4ec>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d028      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d121      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d11a      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	085b      	lsrs	r3, r3, #1
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0cc      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d90c      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d044      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e067      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4934      	ldr	r1, [pc, #208]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fa22 	bl	8001408 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff fa1e 	bl	8001408 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e04f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d20c      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f821 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f982 	bl	8001380 <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023c00 	.word	0x40023c00
 800208c:	40023800 	.word	0x40023800
 8002090:	08003888 	.word	0x08003888
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a0:	b094      	sub	sp, #80	; 0x50
 80020a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
 80020a8:	2300      	movs	r3, #0
 80020aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ac:	2300      	movs	r3, #0
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b4:	4b79      	ldr	r3, [pc, #484]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d00d      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x40>
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	f200 80e1 	bhi.w	8002288 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x34>
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ce:	e0db      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020d4:	e0db      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020da:	e0d8      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020dc:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e6:	4b6d      	ldr	r3, [pc, #436]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f2:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	2200      	movs	r2, #0
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80020fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	2300      	movs	r3, #0
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
 800210a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800210e:	4622      	mov	r2, r4
 8002110:	462b      	mov	r3, r5
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	0159      	lsls	r1, r3, #5
 800211c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002120:	0150      	lsls	r0, r2, #5
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4621      	mov	r1, r4
 8002128:	1a51      	subs	r1, r2, r1
 800212a:	6139      	str	r1, [r7, #16]
 800212c:	4629      	mov	r1, r5
 800212e:	eb63 0301 	sbc.w	r3, r3, r1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002140:	4659      	mov	r1, fp
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	4651      	mov	r1, sl
 8002146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214a:	4651      	mov	r1, sl
 800214c:	018a      	lsls	r2, r1, #6
 800214e:	4651      	mov	r1, sl
 8002150:	ebb2 0801 	subs.w	r8, r2, r1
 8002154:	4659      	mov	r1, fp
 8002156:	eb63 0901 	sbc.w	r9, r3, r1
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800216a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800216e:	4690      	mov	r8, r2
 8002170:	4699      	mov	r9, r3
 8002172:	4623      	mov	r3, r4
 8002174:	eb18 0303 	adds.w	r3, r8, r3
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	462b      	mov	r3, r5
 800217c:	eb49 0303 	adc.w	r3, r9, r3
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800218e:	4629      	mov	r1, r5
 8002190:	024b      	lsls	r3, r1, #9
 8002192:	4621      	mov	r1, r4
 8002194:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002198:	4621      	mov	r1, r4
 800219a:	024a      	lsls	r2, r1, #9
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a2:	2200      	movs	r2, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ac:	f7fe fb1a 	bl	80007e4 <__aeabi_uldivmod>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4613      	mov	r3, r2
 80021b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b8:	e058      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	2200      	movs	r2, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	4611      	mov	r1, r2
 80021c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	f04f 0000 	mov.w	r0, #0
 80021dc:	f04f 0100 	mov.w	r1, #0
 80021e0:	0159      	lsls	r1, r3, #5
 80021e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e6:	0150      	lsls	r0, r2, #5
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4641      	mov	r1, r8
 80021ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80021f2:	4649      	mov	r1, r9
 80021f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002204:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002208:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800220c:	ebb2 040a 	subs.w	r4, r2, sl
 8002210:	eb63 050b 	sbc.w	r5, r3, fp
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	00eb      	lsls	r3, r5, #3
 800221e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	4643      	mov	r3, r8
 800222a:	18e3      	adds	r3, r4, r3
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	464b      	mov	r3, r9
 8002230:	eb45 0303 	adc.w	r3, r5, r3
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002242:	4629      	mov	r1, r5
 8002244:	028b      	lsls	r3, r1, #10
 8002246:	4621      	mov	r1, r4
 8002248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800224c:	4621      	mov	r1, r4
 800224e:	028a      	lsls	r2, r1, #10
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002256:	2200      	movs	r2, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	61fa      	str	r2, [r7, #28]
 800225c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002260:	f7fe fac0 	bl	80007e4 <__aeabi_uldivmod>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4613      	mov	r3, r2
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800227c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800227e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002286:	e002      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800228a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800228c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002290:	4618      	mov	r0, r3
 8002292:	3750      	adds	r7, #80	; 0x50
 8002294:	46bd      	mov	sp, r7
 8002296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	00f42400 	.word	0x00f42400
 80022a4:	007a1200 	.word	0x007a1200

080022a8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e038      	b.n	8002330 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7fe fcd6 	bl	8000c84 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3308      	adds	r3, #8
 80022e0:	4619      	mov	r1, r3
 80022e2:	4610      	mov	r0, r2
 80022e4:	f001 f864 	bl	80033b0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	f001 f8c6 	bl	8003484 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6858      	ldr	r0, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	f001 f8f3 	bl	80034f0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	6892      	ldr	r2, [r2, #8]
 8002312:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	6892      	ldr	r2, [r2, #8]
 800231e:	f041 0101 	orr.w	r1, r1, #1
 8002322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe ff4a 	bl	80011f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 fc7a 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d001      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e04e      	b.n	800248e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a23      	ldr	r2, [pc, #140]	; (800249c <HAL_TIM_Base_Start_IT+0xc4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d022      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241a:	d01d      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a1f      	ldr	r2, [pc, #124]	; (80024a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d018      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d013      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00e      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <HAL_TIM_Base_Start_IT+0xd4>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d009      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_TIM_Base_Start_IT+0x80>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d111      	bne.n	800247c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d010      	beq.n	800248c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247a:	e007      	b.n	800248c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40010000 	.word	0x40010000
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40000800 	.word	0x40000800
 80024a8:	40000c00 	.word	0x40000c00
 80024ac:	40010400 	.word	0x40010400
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40001800 	.word	0x40001800

080024b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e041      	b.n	800254e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f839 	bl	8002556 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 fbba 	bl	8002c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_TIM_PWM_Start+0x24>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	e022      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b04      	cmp	r3, #4
 8002594:	d109      	bne.n	80025aa <HAL_TIM_PWM_Start+0x3e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	bf14      	ite	ne
 80025a2:	2301      	movne	r3, #1
 80025a4:	2300      	moveq	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	e015      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d109      	bne.n	80025c4 <HAL_TIM_PWM_Start+0x58>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <HAL_TIM_PWM_Start+0x6a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07c      	b.n	80026d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d104      	bne.n	80025ee <HAL_TIM_PWM_Start+0x82>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ec:	e013      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0x92>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025fc:	e00b      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b08      	cmp	r3, #8
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0xa2>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800260c:	e003      	b.n	8002616 <HAL_TIM_PWM_Start+0xaa>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2201      	movs	r2, #1
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fe10 	bl	8003244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2d      	ldr	r2, [pc, #180]	; (80026e0 <HAL_TIM_PWM_Start+0x174>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_TIM_PWM_Start+0xcc>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2c      	ldr	r2, [pc, #176]	; (80026e4 <HAL_TIM_PWM_Start+0x178>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d101      	bne.n	800263c <HAL_TIM_PWM_Start+0xd0>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_TIM_PWM_Start+0xd2>
 800263c:	2300      	movs	r3, #0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002650:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a22      	ldr	r2, [pc, #136]	; (80026e0 <HAL_TIM_PWM_Start+0x174>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002664:	d01d      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1f      	ldr	r2, [pc, #124]	; (80026e8 <HAL_TIM_PWM_Start+0x17c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d018      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1d      	ldr	r2, [pc, #116]	; (80026ec <HAL_TIM_PWM_Start+0x180>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <HAL_TIM_PWM_Start+0x184>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00e      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_TIM_PWM_Start+0x178>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a18      	ldr	r2, [pc, #96]	; (80026f4 <HAL_TIM_PWM_Start+0x188>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x136>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_TIM_PWM_Start+0x18c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d111      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d010      	beq.n	80026d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c4:	e007      	b.n	80026d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40010000 	.word	0x40010000
 80026e4:	40010400 	.word	0x40010400
 80026e8:	40000400 	.word	0x40000400
 80026ec:	40000800 	.word	0x40000800
 80026f0:	40000c00 	.word	0x40000c00
 80026f4:	40014000 	.word	0x40014000
 80026f8:	40001800 	.word	0x40001800

080026fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b02      	cmp	r3, #2
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b02      	cmp	r3, #2
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0202 	mvn.w	r2, #2
 8002728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa77 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa69 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fa7a 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b04      	cmp	r3, #4
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0204 	mvn.w	r2, #4
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa4d 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa3f 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa50 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d122      	bne.n	8002800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0208 	mvn.w	r2, #8
 80027d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2204      	movs	r2, #4
 80027d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa23 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa15 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 fa26 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b10      	cmp	r3, #16
 800280c:	d122      	bne.n	8002854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b10      	cmp	r3, #16
 800281a:	d11b      	bne.n	8002854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0210 	mvn.w	r2, #16
 8002824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2208      	movs	r2, #8
 800282a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f9f9 	bl	8002c32 <HAL_TIM_IC_CaptureCallback>
 8002840:	e005      	b.n	800284e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f9eb 	bl	8002c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f9fc 	bl	8002c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d10e      	bne.n	8002880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d107      	bne.n	8002880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f06f 0201 	mvn.w	r2, #1
 8002878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fb50 	bl	8000f20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b80      	cmp	r3, #128	; 0x80
 800288c:	d10e      	bne.n	80028ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002898:	2b80      	cmp	r3, #128	; 0x80
 800289a:	d107      	bne.n	80028ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd78 	bl	800339c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d107      	bne.n	80028d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f9c1 	bl	8002c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	d10e      	bne.n	8002904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d107      	bne.n	8002904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0220 	mvn.w	r2, #32
 80028fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fd42 	bl	8003388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002904:	bf00      	nop
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002926:	2302      	movs	r3, #2
 8002928:	e0ae      	b.n	8002a88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0c      	cmp	r3, #12
 8002936:	f200 809f 	bhi.w	8002a78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800293a:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002975 	.word	0x08002975
 8002944:	08002a79 	.word	0x08002a79
 8002948:	08002a79 	.word	0x08002a79
 800294c:	08002a79 	.word	0x08002a79
 8002950:	080029b5 	.word	0x080029b5
 8002954:	08002a79 	.word	0x08002a79
 8002958:	08002a79 	.word	0x08002a79
 800295c:	08002a79 	.word	0x08002a79
 8002960:	080029f7 	.word	0x080029f7
 8002964:	08002a79 	.word	0x08002a79
 8002968:	08002a79 	.word	0x08002a79
 800296c:	08002a79 	.word	0x08002a79
 8002970:	08002a37 	.word	0x08002a37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fa18 	bl	8002db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0208 	orr.w	r2, r2, #8
 800298e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0204 	bic.w	r2, r2, #4
 800299e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6999      	ldr	r1, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
      break;
 80029b2:	e064      	b.n	8002a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fa68 	bl	8002e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6999      	ldr	r1, [r3, #24]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	021a      	lsls	r2, r3, #8
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	619a      	str	r2, [r3, #24]
      break;
 80029f4:	e043      	b.n	8002a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68b9      	ldr	r1, [r7, #8]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fabd 	bl	8002f7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0208 	orr.w	r2, r2, #8
 8002a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69da      	ldr	r2, [r3, #28]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0204 	bic.w	r2, r2, #4
 8002a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69d9      	ldr	r1, [r3, #28]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	691a      	ldr	r2, [r3, #16]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	61da      	str	r2, [r3, #28]
      break;
 8002a34:	e023      	b.n	8002a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68b9      	ldr	r1, [r7, #8]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f000 fb11 	bl	8003064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	69da      	ldr	r2, [r3, #28]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69d9      	ldr	r1, [r3, #28]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	021a      	lsls	r2, r3, #8
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	61da      	str	r2, [r3, #28]
      break;
 8002a76:	e002      	b.n	8002a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_TIM_ConfigClockSource+0x1c>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e0b4      	b.n	8002c16 <HAL_TIM_ConfigClockSource+0x186>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae4:	d03e      	beq.n	8002b64 <HAL_TIM_ConfigClockSource+0xd4>
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aea:	f200 8087 	bhi.w	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	f000 8086 	beq.w	8002c02 <HAL_TIM_ConfigClockSource+0x172>
 8002af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afa:	d87f      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002afc:	2b70      	cmp	r3, #112	; 0x70
 8002afe:	d01a      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0xa6>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d87b      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002b04:	2b60      	cmp	r3, #96	; 0x60
 8002b06:	d050      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x11a>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d877      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002b0c:	2b50      	cmp	r3, #80	; 0x50
 8002b0e:	d03c      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0xfa>
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d873      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d058      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0x13a>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d86f      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002b1c:	2b30      	cmp	r3, #48	; 0x30
 8002b1e:	d064      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x15a>
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d86b      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d060      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x15a>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d867      	bhi.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d05c      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x15a>
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d05a      	beq.n	8002bea <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	e062      	b.n	8002bfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6899      	ldr	r1, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f000 fb5d 	bl	8003204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	609a      	str	r2, [r3, #8]
      break;
 8002b62:	e04f      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f000 fb46 	bl	8003204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b86:	609a      	str	r2, [r3, #8]
      break;
 8002b88:	e03c      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	6859      	ldr	r1, [r3, #4]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	f000 faba 	bl	8003110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2150      	movs	r1, #80	; 0x50
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fb13 	bl	80031ce <TIM_ITRx_SetConfig>
      break;
 8002ba8:	e02c      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	6859      	ldr	r1, [r3, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f000 fad9 	bl	800316e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2160      	movs	r1, #96	; 0x60
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fb03 	bl	80031ce <TIM_ITRx_SetConfig>
      break;
 8002bc8:	e01c      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f000 fa9a 	bl	8003110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2140      	movs	r1, #64	; 0x40
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 faf3 	bl	80031ce <TIM_ITRx_SetConfig>
      break;
 8002be8:	e00c      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	f000 faea 	bl	80031ce <TIM_ITRx_SetConfig>
      break;
 8002bfa:	e003      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e000      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <TIM_Base_SetConfig+0x114>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8e:	d00f      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a3d      	ldr	r2, [pc, #244]	; (8002d88 <TIM_Base_SetConfig+0x118>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00b      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a3c      	ldr	r2, [pc, #240]	; (8002d8c <TIM_Base_SetConfig+0x11c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d007      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3b      	ldr	r2, [pc, #236]	; (8002d90 <TIM_Base_SetConfig+0x120>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d003      	beq.n	8002cb0 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3a      	ldr	r2, [pc, #232]	; (8002d94 <TIM_Base_SetConfig+0x124>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d108      	bne.n	8002cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	; (8002d84 <TIM_Base_SetConfig+0x114>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d02b      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd0:	d027      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2c      	ldr	r2, [pc, #176]	; (8002d88 <TIM_Base_SetConfig+0x118>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d023      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2b      	ldr	r2, [pc, #172]	; (8002d8c <TIM_Base_SetConfig+0x11c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01f      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2a      	ldr	r2, [pc, #168]	; (8002d90 <TIM_Base_SetConfig+0x120>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <TIM_Base_SetConfig+0x124>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <TIM_Base_SetConfig+0x128>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <TIM_Base_SetConfig+0x12c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <TIM_Base_SetConfig+0x130>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <TIM_Base_SetConfig+0x134>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a24      	ldr	r2, [pc, #144]	; (8002da8 <TIM_Base_SetConfig+0x138>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a23      	ldr	r2, [pc, #140]	; (8002dac <TIM_Base_SetConfig+0x13c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <TIM_Base_SetConfig+0x114>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d003      	beq.n	8002d68 <TIM_Base_SetConfig+0xf8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <TIM_Base_SetConfig+0x124>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40000400 	.word	0x40000400
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40000c00 	.word	0x40000c00
 8002d94:	40010400 	.word	0x40010400
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40014400 	.word	0x40014400
 8002da0:	40014800 	.word	0x40014800
 8002da4:	40001800 	.word	0x40001800
 8002da8:	40001c00 	.word	0x40001c00
 8002dac:	40002000 	.word	0x40002000

08002db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f023 0201 	bic.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f023 0303 	bic.w	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f023 0302 	bic.w	r3, r3, #2
 8002df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a20      	ldr	r2, [pc, #128]	; (8002e88 <TIM_OC1_SetConfig+0xd8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_OC1_SetConfig+0x64>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <TIM_OC1_SetConfig+0xdc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10c      	bne.n	8002e2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0308 	bic.w	r3, r3, #8
 8002e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 0304 	bic.w	r3, r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a15      	ldr	r2, [pc, #84]	; (8002e88 <TIM_OC1_SetConfig+0xd8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d003      	beq.n	8002e3e <TIM_OC1_SetConfig+0x8e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <TIM_OC1_SetConfig+0xdc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d111      	bne.n	8002e62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40010400 	.word	0x40010400

08002e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f023 0210 	bic.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0320 	bic.w	r3, r3, #32
 8002eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a22      	ldr	r2, [pc, #136]	; (8002f74 <TIM_OC2_SetConfig+0xe4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d003      	beq.n	8002ef8 <TIM_OC2_SetConfig+0x68>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a21      	ldr	r2, [pc, #132]	; (8002f78 <TIM_OC2_SetConfig+0xe8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d10d      	bne.n	8002f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <TIM_OC2_SetConfig+0xe4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_OC2_SetConfig+0x94>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <TIM_OC2_SetConfig+0xe8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d113      	bne.n	8002f4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40010000 	.word	0x40010000
 8002f78:	40010400 	.word	0x40010400

08002f7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f023 0303 	bic.w	r3, r3, #3
 8002fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	021b      	lsls	r3, r3, #8
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <TIM_OC3_SetConfig+0xe0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d003      	beq.n	8002fe2 <TIM_OC3_SetConfig+0x66>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a20      	ldr	r2, [pc, #128]	; (8003060 <TIM_OC3_SetConfig+0xe4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10d      	bne.n	8002ffe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a16      	ldr	r2, [pc, #88]	; (800305c <TIM_OC3_SetConfig+0xe0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <TIM_OC3_SetConfig+0x92>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a15      	ldr	r2, [pc, #84]	; (8003060 <TIM_OC3_SetConfig+0xe4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d113      	bne.n	8003036 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800301c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	621a      	str	r2, [r3, #32]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40010000 	.word	0x40010000
 8003060:	40010400 	.word	0x40010400

08003064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	031b      	lsls	r3, r3, #12
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <TIM_OC4_SetConfig+0xa4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d003      	beq.n	80030cc <TIM_OC4_SetConfig+0x68>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a11      	ldr	r2, [pc, #68]	; (800310c <TIM_OC4_SetConfig+0xa8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d109      	bne.n	80030e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40010000 	.word	0x40010000
 800310c:	40010400 	.word	0x40010400

08003110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0201 	bic.w	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f023 030a 	bic.w	r3, r3, #10
 800314c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	621a      	str	r2, [r3, #32]
}
 8003162:	bf00      	nop
 8003164:	371c      	adds	r7, #28
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800316e:	b480      	push	{r7}
 8003170:	b087      	sub	sp, #28
 8003172:	af00      	add	r7, sp, #0
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f023 0210 	bic.w	r2, r3, #16
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003198:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	031b      	lsls	r3, r3, #12
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f043 0307 	orr.w	r3, r3, #7
 80031f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800321e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	021a      	lsls	r2, r3, #8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	431a      	orrs	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1a      	ldr	r2, [r3, #32]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	43db      	mvns	r3, r3
 8003266:	401a      	ands	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1a      	ldr	r2, [r3, #32]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	fa01 f303 	lsl.w	r3, r1, r3
 800327c:	431a      	orrs	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	621a      	str	r2, [r3, #32]
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e05a      	b.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d022      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d01d      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1d      	ldr	r2, [pc, #116]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d018      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a17      	ldr	r2, [pc, #92]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10c      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40010000 	.word	0x40010000
 8003370:	40000400 	.word	0x40000400
 8003374:	40000800 	.word	0x40000800
 8003378:	40000c00 	.word	0x40000c00
 800337c:	40010400 	.word	0x40010400
 8003380:	40014000 	.word	0x40014000
 8003384:	40001800 	.word	0x40001800

08003388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	f023 0101 	bic.w	r1, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b08      	cmp	r3, #8
 80033d8:	d102      	bne.n	80033e0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80033da:	2340      	movs	r3, #64	; 0x40
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e001      	b.n	80033e4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80033f0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80033f6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80033fc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003402:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003408:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800340e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003414:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800341a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003420:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <FSMC_NORSRAM_Init+0xd0>)
 8003440:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003448:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003450:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43db      	mvns	r3, r3
 8003460:	ea02 0103 	and.w	r1, r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4319      	orrs	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	0008fb7f 	.word	0x0008fb7f

08003484 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	431a      	orrs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	3b01      	subs	r3, #1
 80034c0:	051b      	lsls	r3, r3, #20
 80034c2:	431a      	orrs	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	3b02      	subs	r3, #2
 80034ca:	061b      	lsls	r3, r3, #24
 80034cc:	431a      	orrs	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	3201      	adds	r2, #1
 80034d8:	4319      	orrs	r1, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003504:	d11d      	bne.n	8003542 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800350e:	4b13      	ldr	r3, [pc, #76]	; (800355c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003510:	4013      	ands	r3, r2
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	6811      	ldr	r1, [r2, #0]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	6852      	ldr	r2, [r2, #4]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	4311      	orrs	r1, r2
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	6892      	ldr	r2, [r2, #8]
 8003522:	0212      	lsls	r2, r2, #8
 8003524:	4311      	orrs	r1, r2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	6992      	ldr	r2, [r2, #24]
 800352a:	4311      	orrs	r1, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	68d2      	ldr	r2, [r2, #12]
 8003530:	0412      	lsls	r2, r2, #16
 8003532:	430a      	orrs	r2, r1
 8003534:	ea43 0102 	orr.w	r1, r3, r2
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003540:	e005      	b.n	800354e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800354a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	cff00000 	.word	0xcff00000

08003560 <AD7606_Init>:
 * 形    参: 无
 * 返 回 值: 无
 * ****************************************************************************** *
 */
void AD7606_Init()
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
	AD7606_SetOS(AD_OS_NO);
 8003564:	2000      	movs	r0, #0
 8003566:	f000 f82f 	bl	80035c8 <AD7606_SetOS>
	AD7606_RESET();
 800356a:	f000 f80b 	bl	8003584 <AD7606_RESET>
	AD7606_StartRecord();
 800356e:	f000 f90b 	bl	8003788 <AD7606_StartRecord>
	AD7606Cs_L;
 8003572:	2200      	movs	r2, #0
 8003574:	2104      	movs	r1, #4
 8003576:	4802      	ldr	r0, [pc, #8]	; (8003580 <AD7606_Init+0x20>)
 8003578:	f7fe fa00 	bl	800197c <HAL_GPIO_WritePin>
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40020000 	.word	0x40020000

08003584 <AD7606_RESET>:
 * 形    参: 无
 * 返 回 值: 无
 * ****************************************************************************** *
 */
void AD7606_RESET()
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
	AD7606Rst_L;
 800358a:	2200      	movs	r2, #0
 800358c:	2102      	movs	r1, #2
 800358e:	480d      	ldr	r0, [pc, #52]	; (80035c4 <AD7606_RESET+0x40>)
 8003590:	f7fe f9f4 	bl	800197c <HAL_GPIO_WritePin>
	/* RESET复位高电平脉冲宽度最小50ns。 */
	AD7606Rst_H;
 8003594:	2201      	movs	r2, #1
 8003596:	2102      	movs	r1, #2
 8003598:	480a      	ldr	r0, [pc, #40]	; (80035c4 <AD7606_RESET+0x40>)
 800359a:	f7fe f9ef 	bl	800197c <HAL_GPIO_WritePin>
	// 主频168M  即1/168M = 0.00595us = 5.95ns
	for (int i =10; i>0; i--)
 800359e:	230a      	movs	r3, #10
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e003      	b.n	80035ac <AD7606_RESET+0x28>
	{
		__NOP();
 80035a4:	bf00      	nop
	for (int i =10; i>0; i--)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	607b      	str	r3, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dcf8      	bgt.n	80035a4 <AD7606_RESET+0x20>
	}

	AD7606Rst_L;
 80035b2:	2200      	movs	r2, #0
 80035b4:	2102      	movs	r1, #2
 80035b6:	4803      	ldr	r0, [pc, #12]	; (80035c4 <AD7606_RESET+0x40>)
 80035b8:	f7fe f9e0 	bl	800197c <HAL_GPIO_WritePin>
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40020000 	.word	0x40020000

080035c8 <AD7606_SetOS>:
 *	形    参: _ucOS : 过采样倍率, 0 - 6
 *	返 回 值: 无
 * ****************************************************************************** *
 */
void AD7606_SetOS(uint8_t _usOS)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
	g_tAD7606.ucOS = _usOS;
 80035d2:	4a4a      	ldr	r2, [pc, #296]	; (80036fc <AD7606_SetOS+0x134>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	7013      	strb	r3, [r2, #0]
	switch (_usOS)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	3b01      	subs	r3, #1
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d875      	bhi.n	80036cc <AD7606_SetOS+0x104>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <AD7606_SetOS+0x20>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	08003601 	.word	0x08003601
 80035ec:	08003623 	.word	0x08003623
 80035f0:	08003645 	.word	0x08003645
 80035f4:	08003667 	.word	0x08003667
 80035f8:	08003689 	.word	0x08003689
 80035fc:	080036ab 	.word	0x080036ab
	{
		case AD_OS_X2:
			AD7606_Os0_0;
 8003600:	2200      	movs	r2, #0
 8003602:	2140      	movs	r1, #64	; 0x40
 8003604:	483e      	ldr	r0, [pc, #248]	; (8003700 <AD7606_SetOS+0x138>)
 8003606:	f7fe f9b9 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_0;
 800360a:	2200      	movs	r2, #0
 800360c:	2180      	movs	r1, #128	; 0x80
 800360e:	483c      	ldr	r0, [pc, #240]	; (8003700 <AD7606_SetOS+0x138>)
 8003610:	f7fe f9b4 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_1;
 8003614:	2201      	movs	r2, #1
 8003616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800361a:	4839      	ldr	r0, [pc, #228]	; (8003700 <AD7606_SetOS+0x138>)
 800361c:	f7fe f9ae 	bl	800197c <HAL_GPIO_WritePin>
			break;
 8003620:	e068      	b.n	80036f4 <AD7606_SetOS+0x12c>
		case AD_OS_X4:
			AD7606_Os0_0;
 8003622:	2200      	movs	r2, #0
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4836      	ldr	r0, [pc, #216]	; (8003700 <AD7606_SetOS+0x138>)
 8003628:	f7fe f9a8 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_1;
 800362c:	2201      	movs	r2, #1
 800362e:	2180      	movs	r1, #128	; 0x80
 8003630:	4833      	ldr	r0, [pc, #204]	; (8003700 <AD7606_SetOS+0x138>)
 8003632:	f7fe f9a3 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_0;
 8003636:	2200      	movs	r2, #0
 8003638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800363c:	4830      	ldr	r0, [pc, #192]	; (8003700 <AD7606_SetOS+0x138>)
 800363e:	f7fe f99d 	bl	800197c <HAL_GPIO_WritePin>
			break;
 8003642:	e057      	b.n	80036f4 <AD7606_SetOS+0x12c>
		case AD_OS_X8:
			AD7606_Os0_0;
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	; 0x40
 8003648:	482d      	ldr	r0, [pc, #180]	; (8003700 <AD7606_SetOS+0x138>)
 800364a:	f7fe f997 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_1;
 800364e:	2201      	movs	r2, #1
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	482b      	ldr	r0, [pc, #172]	; (8003700 <AD7606_SetOS+0x138>)
 8003654:	f7fe f992 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_1;
 8003658:	2201      	movs	r2, #1
 800365a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800365e:	4828      	ldr	r0, [pc, #160]	; (8003700 <AD7606_SetOS+0x138>)
 8003660:	f7fe f98c 	bl	800197c <HAL_GPIO_WritePin>
			break;
 8003664:	e046      	b.n	80036f4 <AD7606_SetOS+0x12c>
		case AD_OS_X16:
			AD7606_Os0_1;
 8003666:	2201      	movs	r2, #1
 8003668:	2140      	movs	r1, #64	; 0x40
 800366a:	4825      	ldr	r0, [pc, #148]	; (8003700 <AD7606_SetOS+0x138>)
 800366c:	f7fe f986 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_0;
 8003670:	2200      	movs	r2, #0
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	4822      	ldr	r0, [pc, #136]	; (8003700 <AD7606_SetOS+0x138>)
 8003676:	f7fe f981 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_0;
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003680:	481f      	ldr	r0, [pc, #124]	; (8003700 <AD7606_SetOS+0x138>)
 8003682:	f7fe f97b 	bl	800197c <HAL_GPIO_WritePin>
			break;
 8003686:	e035      	b.n	80036f4 <AD7606_SetOS+0x12c>
		case AD_OS_X32:
			AD7606_Os0_1;
 8003688:	2201      	movs	r2, #1
 800368a:	2140      	movs	r1, #64	; 0x40
 800368c:	481c      	ldr	r0, [pc, #112]	; (8003700 <AD7606_SetOS+0x138>)
 800368e:	f7fe f975 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_0;
 8003692:	2200      	movs	r2, #0
 8003694:	2180      	movs	r1, #128	; 0x80
 8003696:	481a      	ldr	r0, [pc, #104]	; (8003700 <AD7606_SetOS+0x138>)
 8003698:	f7fe f970 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_1;
 800369c:	2201      	movs	r2, #1
 800369e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036a2:	4817      	ldr	r0, [pc, #92]	; (8003700 <AD7606_SetOS+0x138>)
 80036a4:	f7fe f96a 	bl	800197c <HAL_GPIO_WritePin>
			break;
 80036a8:	e024      	b.n	80036f4 <AD7606_SetOS+0x12c>
		case AD_OS_X64:
			AD7606_Os0_1;
 80036aa:	2201      	movs	r2, #1
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	4814      	ldr	r0, [pc, #80]	; (8003700 <AD7606_SetOS+0x138>)
 80036b0:	f7fe f964 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_1;
 80036b4:	2201      	movs	r2, #1
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	4811      	ldr	r0, [pc, #68]	; (8003700 <AD7606_SetOS+0x138>)
 80036ba:	f7fe f95f 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_0;
 80036be:	2200      	movs	r2, #0
 80036c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036c4:	480e      	ldr	r0, [pc, #56]	; (8003700 <AD7606_SetOS+0x138>)
 80036c6:	f7fe f959 	bl	800197c <HAL_GPIO_WritePin>
			break;
 80036ca:	e013      	b.n	80036f4 <AD7606_SetOS+0x12c>
		case AD_OS_NO:
		default:
			g_tAD7606.ucOS = AD_OS_NO;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <AD7606_SetOS+0x134>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
			AD7606_Os0_0;
 80036d2:	2200      	movs	r2, #0
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	480a      	ldr	r0, [pc, #40]	; (8003700 <AD7606_SetOS+0x138>)
 80036d8:	f7fe f950 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os1_0;
 80036dc:	2200      	movs	r2, #0
 80036de:	2180      	movs	r1, #128	; 0x80
 80036e0:	4807      	ldr	r0, [pc, #28]	; (8003700 <AD7606_SetOS+0x138>)
 80036e2:	f7fe f94b 	bl	800197c <HAL_GPIO_WritePin>
			AD7606_Os2_0;
 80036e6:	2200      	movs	r2, #0
 80036e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80036ec:	4804      	ldr	r0, [pc, #16]	; (8003700 <AD7606_SetOS+0x138>)
 80036ee:	f7fe f945 	bl	800197c <HAL_GPIO_WritePin>
			break;
 80036f2:	bf00      	nop
	}

}
 80036f4:	bf00      	nop
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000124 	.word	0x20000124
 8003700:	40020000 	.word	0x40020000

08003704 <AD7606_ReadNowAdc>:
*	形    参: 无
*	返 回 值: 无
*********************************************************************************************************
*/
void AD7606_ReadNowAdc(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
	g_tAD7606.sNowAdc[0] = AD7606_RESULT();	/* 读第1路样本 */
 8003708:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	b21a      	sxth	r2, r3
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 8003714:	805a      	strh	r2, [r3, #2]
	g_tAD7606.sNowAdc[1] = AD7606_RESULT();	/* 读第2路样本 */
 8003716:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b29b      	uxth	r3, r3
 800371e:	b21a      	sxth	r2, r3
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 8003722:	809a      	strh	r2, [r3, #4]
	g_tAD7606.sNowAdc[2] = AD7606_RESULT();	/* 读第3路样本 */
 8003724:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	b21a      	sxth	r2, r3
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 8003730:	80da      	strh	r2, [r3, #6]
	g_tAD7606.sNowAdc[3] = AD7606_RESULT();	/* 读第4路样本 */
 8003732:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	b29b      	uxth	r3, r3
 800373a:	b21a      	sxth	r2, r3
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 800373e:	811a      	strh	r2, [r3, #8]
	g_tAD7606.sNowAdc[4] = AD7606_RESULT();	/* 读第5路样本 */
 8003740:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21a      	sxth	r2, r3
 800374a:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 800374c:	815a      	strh	r2, [r3, #10]
	g_tAD7606.sNowAdc[5] = AD7606_RESULT();	/* 读第6路样本 */
 800374e:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	b21a      	sxth	r2, r3
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 800375a:	819a      	strh	r2, [r3, #12]
	g_tAD7606.sNowAdc[6] = AD7606_RESULT();	/* 读第7路样本 */
 800375c:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	b21a      	sxth	r2, r3
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 8003768:	81da      	strh	r2, [r3, #14]
	g_tAD7606.sNowAdc[7] = AD7606_RESULT();	/* 读第8路样本 */
 800376a:	f04f 43d8 	mov.w	r3, #1811939328	; 0x6c000000
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	b29b      	uxth	r3, r3
 8003772:	b21a      	sxth	r2, r3
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <AD7606_ReadNowAdc+0x80>)
 8003776:	821a      	strh	r2, [r3, #16]

//	AD7606_SEGGER_RTTOUT();
}
 8003778:	bf00      	nop
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000124 	.word	0x20000124

08003788 <AD7606_StartRecord>:
*	形    参: 无
*	返 回 值: 无
*********************************************************************************************************
*/
void AD7606_StartRecord()
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
	/* 必须在开启定时器之前清0 */
	g_tAdcFifo.usRead = 0;
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <AD7606_StartRecord+0x28>)
 800378e:	2200      	movs	r2, #0
 8003790:	801a      	strh	r2, [r3, #0]
	g_tAdcFifo.usWrite = 0;
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <AD7606_StartRecord+0x28>)
 8003794:	2200      	movs	r2, #0
 8003796:	805a      	strh	r2, [r3, #2]
	g_tAdcFifo.usCount = 0;
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <AD7606_StartRecord+0x28>)
 800379a:	2200      	movs	r2, #0
 800379c:	809a      	strh	r2, [r3, #4]
	g_tAdcFifo.ucFull = 0;
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <AD7606_StartRecord+0x28>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	719a      	strb	r2, [r3, #6]
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000138 	.word	0x20000138

080037b4 <AD7606_ISR>:
*	形    参: 无
*	返 回 值: 无
*********************************************************************************************************
*/
void AD7606_ISR(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
	uint8_t i;

	AD7606_ReadNowAdc();
 80037b8:	f7ff ffa4 	bl	8003704 <AD7606_ReadNowAdc>


		g_tAdcFifo.sBuf[g_tAdcFifo.usWrite] = g_tAD7606.sNowAdc[0];
 80037bc:	4b14      	ldr	r3, [pc, #80]	; (8003810 <AD7606_ISR+0x5c>)
 80037be:	885b      	ldrh	r3, [r3, #2]
 80037c0:	4618      	mov	r0, r3
 80037c2:	4b14      	ldr	r3, [pc, #80]	; (8003814 <AD7606_ISR+0x60>)
 80037c4:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80037c8:	4a11      	ldr	r2, [pc, #68]	; (8003810 <AD7606_ISR+0x5c>)
 80037ca:	1d03      	adds	r3, r0, #4
 80037cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if (++g_tAdcFifo.usWrite >= ADC_FIFO_SIZE)
 80037d0:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <AD7606_ISR+0x5c>)
 80037d2:	885b      	ldrh	r3, [r3, #2]
 80037d4:	3301      	adds	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b0d      	ldr	r3, [pc, #52]	; (8003810 <AD7606_ISR+0x5c>)
 80037da:	805a      	strh	r2, [r3, #2]
 80037dc:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <AD7606_ISR+0x5c>)
 80037de:	885b      	ldrh	r3, [r3, #2]
 80037e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e4:	d302      	bcc.n	80037ec <AD7606_ISR+0x38>
		{
			g_tAdcFifo.usWrite = 0;
 80037e6:	4b0a      	ldr	r3, [pc, #40]	; (8003810 <AD7606_ISR+0x5c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	805a      	strh	r2, [r3, #2]
		}
		if (g_tAdcFifo.usCount < ADC_FIFO_SIZE)
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <AD7606_ISR+0x5c>)
 80037ee:	889b      	ldrh	r3, [r3, #4]
 80037f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037f4:	d206      	bcs.n	8003804 <AD7606_ISR+0x50>
		{
			g_tAdcFifo.usCount++;
 80037f6:	4b06      	ldr	r3, [pc, #24]	; (8003810 <AD7606_ISR+0x5c>)
 80037f8:	889b      	ldrh	r3, [r3, #4]
 80037fa:	3301      	adds	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	4b04      	ldr	r3, [pc, #16]	; (8003810 <AD7606_ISR+0x5c>)
 8003800:	809a      	strh	r2, [r3, #4]
		else
		{
			g_tAdcFifo.ucFull = 1;		/* FIFO 满，主程序来不及处理数据 */
		}

}
 8003802:	e002      	b.n	800380a <AD7606_ISR+0x56>
			g_tAdcFifo.ucFull = 1;		/* FIFO 满，主程序来不及处理数据 */
 8003804:	4b02      	ldr	r3, [pc, #8]	; (8003810 <AD7606_ISR+0x5c>)
 8003806:	2201      	movs	r2, #1
 8003808:	719a      	strb	r2, [r3, #6]
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000138 	.word	0x20000138
 8003814:	20000124 	.word	0x20000124

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4d0d      	ldr	r5, [pc, #52]	; (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2600      	movs	r6, #0
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4d0b      	ldr	r5, [pc, #44]	; (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	; (800385c <__libc_init_array+0x44>)
 800382c:	f000 f820 	bl	8003870 <_init>
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2600      	movs	r6, #0
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	080038a0 	.word	0x080038a0
 8003854:	080038a0 	.word	0x080038a0
 8003858:	080038a0 	.word	0x080038a0
 800385c:	080038a4 	.word	0x080038a4

08003860 <memset>:
 8003860:	4402      	add	r2, r0
 8003862:	4603      	mov	r3, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	d100      	bne.n	800386a <memset+0xa>
 8003868:	4770      	bx	lr
 800386a:	f803 1b01 	strb.w	r1, [r3], #1
 800386e:	e7f9      	b.n	8003864 <memset+0x4>

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
